<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="main__bimol__annihilation_8cpp" kind="file" language="C++">
    <compoundname>main_bimol_annihilation.cpp</compoundname>
    <includes refid="dynamic__boltzmann_8hpp" local="yes">dynamic_boltzmann.hpp</includes>
    <includes refid="general_8hpp" local="yes">general.hpp</includes>
    <includes local="no">iostream</includes>
    <incdepgraph>
      <node id="98">
        <label>list</label>
      </node>
      <node id="97">
        <label>lattice.hpp</label>
        <link refid="lattice_8hpp_source"/>
        <childnode refid="98" relation="include">
        </childnode>
        <childnode refid="93" relation="include">
        </childnode>
        <childnode refid="92" relation="include">
        </childnode>
        <childnode refid="96" relation="include">
        </childnode>
      </node>
      <node id="91">
        <label>ixn_param.hpp</label>
        <link refid="ixn__param_8hpp_source"/>
        <childnode refid="92" relation="include">
        </childnode>
        <childnode refid="93" relation="include">
        </childnode>
        <childnode refid="94" relation="include">
        </childnode>
      </node>
      <node id="93">
        <label>string</label>
      </node>
      <node id="96">
        <label>map</label>
      </node>
      <node id="99">
        <label>general.hpp</label>
        <link refid="general_8hpp_source"/>
        <childnode refid="93" relation="include">
        </childnode>
      </node>
      <node id="90">
        <label>dynamic_boltzmann.hpp</label>
        <link refid="dynamic__boltzmann_8hpp_source"/>
        <childnode refid="91" relation="include">
        </childnode>
        <childnode refid="97" relation="include">
        </childnode>
        <childnode refid="98" relation="include">
        </childnode>
      </node>
      <node id="94">
        <label>species.hpp</label>
        <link refid="species_8hpp_source"/>
        <childnode refid="95" relation="include">
        </childnode>
        <childnode refid="96" relation="include">
        </childnode>
        <childnode refid="93" relation="include">
        </childnode>
      </node>
      <node id="92">
        <label>vector</label>
      </node>
      <node id="89">
        <label>main_bimol_annihilation.cpp</label>
        <link refid="main_bimol_annihilation.cpp"/>
        <childnode refid="90" relation="include">
        </childnode>
        <childnode refid="99" relation="include">
        </childnode>
        <childnode refid="100" relation="include">
        </childnode>
      </node>
      <node id="95">
        <label>utility</label>
      </node>
      <node id="100">
        <label>iostream</label>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="main__bimol__annihilation_8cpp_1ae66f6b31b5ad750f1fe042a706a4e3d4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int main</definition>
        <argsstring>()</argsstring>
        <name>main</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="main_bimol_annihilation.cpp" line="7" column="1" bodyfile="main_bimol_annihilation.cpp" bodystart="7" bodyend="51"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;dynamic_boltzmann.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;general.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespace_dynamic_boltzmann" kindref="compound">DynamicBoltzmann</ref>;</highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main()<sp/>{</highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/********************</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/><sp/><sp/><sp/>Test<sp/>optimization<sp/>problem</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/><sp/><sp/><sp/>********************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Dimensions<sp/>vec</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;Dim&gt;<sp/>dims;</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/>dims.push_back(<ref refid="struct_dynamic_boltzmann_1_1_dim" kindref="compound">Dim</ref>(</highlight><highlight class="stringliteral">&quot;hA&quot;</highlight><highlight class="normal">,DimType::H,</highlight><highlight class="stringliteral">&quot;A&quot;</highlight><highlight class="normal">,{</highlight><highlight class="stringliteral">&quot;hA&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;hB&quot;</highlight><highlight class="normal">},-2.0,1.1,20,1.0));</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/>dims.push_back(<ref refid="struct_dynamic_boltzmann_1_1_dim" kindref="compound">Dim</ref>(</highlight><highlight class="stringliteral">&quot;hB&quot;</highlight><highlight class="normal">,DimType::H,</highlight><highlight class="stringliteral">&quot;B&quot;</highlight><highlight class="normal">,{</highlight><highlight class="stringliteral">&quot;hA&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;hB&quot;</highlight><highlight class="normal">},-2.0,1.1,20,1.0));</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/>dims.push_back(<ref refid="struct_dynamic_boltzmann_1_1_dim" kindref="compound">Dim</ref>(</highlight><highlight class="stringliteral">&quot;jAA&quot;</highlight><highlight class="normal">,DimType::J,</highlight><highlight class="stringliteral">&quot;A&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;A&quot;</highlight><highlight class="normal">,{</highlight><highlight class="stringliteral">&quot;jAA&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;jAB&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;jBB&quot;</highlight><highlight class="normal">},-2.0,0.1,16,0.0));</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/>dims.push_back(<ref refid="struct_dynamic_boltzmann_1_1_dim" kindref="compound">Dim</ref>(</highlight><highlight class="stringliteral">&quot;jAB&quot;</highlight><highlight class="normal">,DimType::J,</highlight><highlight class="stringliteral">&quot;A&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;B&quot;</highlight><highlight class="normal">,{</highlight><highlight class="stringliteral">&quot;jAA&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;jAB&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;jBB&quot;</highlight><highlight class="normal">},-2.0,0.1,16,0.0));</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/>dims.push_back(<ref refid="struct_dynamic_boltzmann_1_1_dim" kindref="compound">Dim</ref>(</highlight><highlight class="stringliteral">&quot;jBB&quot;</highlight><highlight class="normal">,DimType::J,</highlight><highlight class="stringliteral">&quot;B&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;B&quot;</highlight><highlight class="normal">,{</highlight><highlight class="stringliteral">&quot;jAA&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;jAB&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;jBB&quot;</highlight><highlight class="normal">},-2.0,0.1,16,0.0));</highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Times</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>t_max=1.0;</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n_t<sp/>=<sp/>101;</highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Opt<sp/>params</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>batch_size<sp/>=<sp/>5;</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n_annealing<sp/>=<sp/>2000;</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>box_length<sp/>=<sp/>10;</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>dopt<sp/>=<sp/>0.01;</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n_opt<sp/>=<sp/>100;</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Init</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Initializing...&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::flush;</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_dynamic_boltzmann_1_1_opt_problem" kindref="compound">OptProblem</ref><sp/>opt(dims,<sp/>{</highlight><highlight class="stringliteral">&quot;A&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;B&quot;</highlight><highlight class="normal">},<sp/>t_max,<sp/>n_t,<sp/>batch_size,<sp/>n_annealing,<sp/>box_length,<sp/>dopt,<sp/>n_opt);</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;ok.&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Add<sp/>filenames</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;100;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>opt.add_fname(</highlight><highlight class="stringliteral">&quot;bimol_annihilation/lattice_v&quot;</highlight><highlight class="normal"><sp/>+<sp/>pad_str(i,2)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;/lattice/&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Validate</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/>opt.validate_setup();</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Solve</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Solving...&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/>opt.solve(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;fin.&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="51"><highlight class="normal">};</highlight></codeline>
    </programlisting>
    <location file="main_bimol_annihilation.cpp"/>
  </compounddef>
</doxygen>
